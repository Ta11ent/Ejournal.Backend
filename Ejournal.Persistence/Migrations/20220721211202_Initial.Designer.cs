// <auto-generated />
using System;
using Ejournal.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Ejournal.Persistence.Migrations
{
    [DbContext(typeof(EjournalDbContext))]
    [Migration("20220721211202_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Ejournal.Domain.Course", b =>
                {
                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("CourseId");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Ejournal.Domain.Curriculum", b =>
                {
                    b.Property<Guid>("CurriculumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<Guid>("SpecializationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CurriculumId");

                    b.HasIndex("CourseId");

                    b.HasIndex("CurriculumId")
                        .IsUnique();

                    b.HasIndex("SpecializationId");

                    b.ToTable("Curriculums");
                });

            modelBuilder.Entity("Ejournal.Domain.CurriculumPart", b =>
                {
                    b.Property<Guid>("CurriculumPartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CurriculumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PartId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CurriculumPartId");

                    b.HasIndex("CurriculumId");

                    b.HasIndex("CurriculumPartId")
                        .IsUnique();

                    b.HasIndex("PartId");

                    b.ToTable("CurriculumParts");
                });

            modelBuilder.Entity("Ejournal.Domain.CurriculumPartSubject", b =>
                {
                    b.Property<Guid>("CurriculumPartSubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurriculumPartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("CurriculumPartSubjectId");

                    b.HasIndex("CurriculumPartId");

                    b.HasIndex("CurriculumPartSubjectId")
                        .IsUnique();

                    b.HasIndex("SubjectId");

                    b.ToTable("CurriculumPartSubjects");
                });

            modelBuilder.Entity("Ejournal.Domain.Department", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("DepartmentId");

                    b.HasIndex("DepartmentId")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Ejournal.Domain.DepartmentMember", b =>
                {
                    b.Property<Guid>("DepartmentMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProfessorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DepartmentMemberId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DepartmentMemberId")
                        .IsUnique();

                    b.ToTable("DepartmentMembers");
                });

            modelBuilder.Entity("Ejournal.Domain.HomeWork", b =>
                {
                    b.Property<Guid>("HomeWorkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("StudentGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HomeWorkId");

                    b.HasIndex("HomeWorkId")
                        .IsUnique();

                    b.HasIndex("StudentGroupId");

                    b.HasIndex("SubjectId");

                    b.ToTable("HomeWorks");
                });

            modelBuilder.Entity("Ejournal.Domain.Mark", b =>
                {
                    b.Property<Guid>("MarkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("MarkId");

                    b.HasIndex("MarkId")
                        .IsUnique();

                    b.ToTable("Marks");
                });

            modelBuilder.Entity("Ejournal.Domain.Part", b =>
                {
                    b.Property<Guid>("PartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PartId");

                    b.HasIndex("PartId")
                        .IsUnique();

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("Ejournal.Domain.RatingLog", b =>
                {
                    b.Property<Guid>("RaitingLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DepartmentMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StudentGroupMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RaitingLogId");

                    b.HasIndex("DepartmentMemberId");

                    b.HasIndex("MarkId");

                    b.HasIndex("RaitingLogId")
                        .IsUnique();

                    b.HasIndex("StudentGroupMemberId");

                    b.HasIndex("SubjectId");

                    b.ToTable("RaitingLogs");
                });

            modelBuilder.Entity("Ejournal.Domain.Schedule", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ScheduleId");

                    b.HasIndex("PartId");

                    b.HasIndex("ScheduleId")
                        .IsUnique();

                    b.HasIndex("StudentGroupId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Ejournal.Domain.ScheduleDay", b =>
                {
                    b.Property<Guid>("ScheduleDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ScheduleDayId");

                    b.HasIndex("ScheduleDayId")
                        .IsUnique();

                    b.HasIndex("ScheduleId");

                    b.ToTable("ScheduleDays");
                });

            modelBuilder.Entity("Ejournal.Domain.ScheduleSubject", b =>
                {
                    b.Property<Guid>("ScheduleSubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DepartmentMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("ScheduleDayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ScheduleSubjectId");

                    b.HasIndex("DepartmentMemberId");

                    b.HasIndex("ScheduleDayId");

                    b.HasIndex("ScheduleSubjectId")
                        .IsUnique();

                    b.HasIndex("SubjectId");

                    b.ToTable("ScheduleSubjects");
                });

            modelBuilder.Entity("Ejournal.Domain.Specialization", b =>
                {
                    b.Property<Guid>("SpecializationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SpecializationId");

                    b.HasIndex("SpecializationId")
                        .IsUnique();

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("Ejournal.Domain.StudentGroup", b =>
                {
                    b.Property<Guid>("StudentGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("SpecializationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StudentGroupId");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("StudentGroupId")
                        .IsUnique();

                    b.ToTable("StudentGroups");
                });

            modelBuilder.Entity("Ejournal.Domain.StudentGroupMember", b =>
                {
                    b.Property<Guid>("StudentGroupMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("StudentGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StudentGroupMemberId");

                    b.HasIndex("StudentGroupId");

                    b.HasIndex("StudentGroupMemberId")
                        .IsUnique();

                    b.ToTable("StudentGroupMembers");
                });

            modelBuilder.Entity("Ejournal.Domain.StudyYear", b =>
                {
                    b.Property<Guid>("StudyYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StudyYearId");

                    b.HasIndex("StudyYearId")
                        .IsUnique();

                    b.ToTable("StudyYears");
                });

            modelBuilder.Entity("Ejournal.Domain.Subject", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SubjectId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("SubjectId")
                        .IsUnique();

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Ejournal.Domain.Curriculum", b =>
                {
                    b.HasOne("Ejournal.Domain.Course", "Course")
                        .WithMany("Curriculums")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ejournal.Domain.Specialization", "Specialization")
                        .WithMany("Curriculums")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Ejournal.Domain.CurriculumPart", b =>
                {
                    b.HasOne("Ejournal.Domain.Curriculum", "Curriculum")
                        .WithMany("CurriculumParts")
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ejournal.Domain.Part", "Part")
                        .WithMany("CurriculumParts")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curriculum");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("Ejournal.Domain.CurriculumPartSubject", b =>
                {
                    b.HasOne("Ejournal.Domain.CurriculumPart", "CurriculumPart")
                        .WithMany()
                        .HasForeignKey("CurriculumPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ejournal.Domain.Subject", "Subject")
                        .WithMany("CurriculumPartSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurriculumPart");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Ejournal.Domain.DepartmentMember", b =>
                {
                    b.HasOne("Ejournal.Domain.Department", "Department")
                        .WithMany("DepartmentMembers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Ejournal.Domain.HomeWork", b =>
                {
                    b.HasOne("Ejournal.Domain.StudentGroup", "StudentGroup")
                        .WithMany("HomeWorks")
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ejournal.Domain.Subject", "Subject")
                        .WithMany("HomeWorks")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentGroup");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Ejournal.Domain.RatingLog", b =>
                {
                    b.HasOne("Ejournal.Domain.DepartmentMember", "DepartmentMember")
                        .WithMany("RaitingLogs")
                        .HasForeignKey("DepartmentMemberId");

                    b.HasOne("Ejournal.Domain.Mark", "Mark")
                        .WithMany("RatingLog")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ejournal.Domain.StudentGroupMember", "StudentGroupMember")
                        .WithMany("RaitingLogs")
                        .HasForeignKey("StudentGroupMemberId");

                    b.HasOne("Ejournal.Domain.Subject", "Subject")
                        .WithMany("RaitingLogs")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepartmentMember");

                    b.Navigation("Mark");

                    b.Navigation("StudentGroupMember");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Ejournal.Domain.Schedule", b =>
                {
                    b.HasOne("Ejournal.Domain.Part", "Part")
                        .WithMany("Schedules")
                        .HasForeignKey("PartId");

                    b.HasOne("Ejournal.Domain.StudentGroup", "StudentGroup")
                        .WithMany("Schedules")
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("StudentGroup");
                });

            modelBuilder.Entity("Ejournal.Domain.ScheduleDay", b =>
                {
                    b.HasOne("Ejournal.Domain.Schedule", "Schedule")
                        .WithMany("ScheduleDays")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Ejournal.Domain.ScheduleSubject", b =>
                {
                    b.HasOne("Ejournal.Domain.DepartmentMember", "DepartmentMember")
                        .WithMany("ScheduleSubjects")
                        .HasForeignKey("DepartmentMemberId");

                    b.HasOne("Ejournal.Domain.ScheduleDay", "ScheduleDay")
                        .WithMany("ScheduleSubjects")
                        .HasForeignKey("ScheduleDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ejournal.Domain.Subject", "Subject")
                        .WithMany("ScheduleSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepartmentMember");

                    b.Navigation("ScheduleDay");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Ejournal.Domain.StudentGroup", b =>
                {
                    b.HasOne("Ejournal.Domain.Specialization", "Specialization")
                        .WithMany("StudentGroups")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Ejournal.Domain.StudentGroupMember", b =>
                {
                    b.HasOne("Ejournal.Domain.StudentGroup", "StudentGroup")
                        .WithMany("StudentGoupMembers")
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentGroup");
                });

            modelBuilder.Entity("Ejournal.Domain.Subject", b =>
                {
                    b.HasOne("Ejournal.Domain.Department", "Department")
                        .WithMany("Subjects")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Ejournal.Domain.Course", b =>
                {
                    b.Navigation("Curriculums");
                });

            modelBuilder.Entity("Ejournal.Domain.Curriculum", b =>
                {
                    b.Navigation("CurriculumParts");
                });

            modelBuilder.Entity("Ejournal.Domain.Department", b =>
                {
                    b.Navigation("DepartmentMembers");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Ejournal.Domain.DepartmentMember", b =>
                {
                    b.Navigation("RaitingLogs");

                    b.Navigation("ScheduleSubjects");
                });

            modelBuilder.Entity("Ejournal.Domain.Mark", b =>
                {
                    b.Navigation("RatingLog");
                });

            modelBuilder.Entity("Ejournal.Domain.Part", b =>
                {
                    b.Navigation("CurriculumParts");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Ejournal.Domain.Schedule", b =>
                {
                    b.Navigation("ScheduleDays");
                });

            modelBuilder.Entity("Ejournal.Domain.ScheduleDay", b =>
                {
                    b.Navigation("ScheduleSubjects");
                });

            modelBuilder.Entity("Ejournal.Domain.Specialization", b =>
                {
                    b.Navigation("Curriculums");

                    b.Navigation("StudentGroups");
                });

            modelBuilder.Entity("Ejournal.Domain.StudentGroup", b =>
                {
                    b.Navigation("HomeWorks");

                    b.Navigation("Schedules");

                    b.Navigation("StudentGoupMembers");
                });

            modelBuilder.Entity("Ejournal.Domain.StudentGroupMember", b =>
                {
                    b.Navigation("RaitingLogs");
                });

            modelBuilder.Entity("Ejournal.Domain.Subject", b =>
                {
                    b.Navigation("CurriculumPartSubjects");

                    b.Navigation("HomeWorks");

                    b.Navigation("RaitingLogs");

                    b.Navigation("ScheduleSubjects");
                });
#pragma warning restore 612, 618
        }
    }
}
